{"meta":{"title":"whisshe's blog","subtitle":null,"description":null,"author":"whisshe","url":"https://whisshe.github.io","root":"/"},"pages":[{"title":"关于","date":"2019-09-15T07:53:15.096Z","updated":"2019-09-15T07:53:15.096Z","comments":true,"path":"about/index.html","permalink":"https://whisshe.github.io/about/index.html","excerpt":"","text":""},{"title":"文章分类","date":"2019-09-15T04:28:55.000Z","updated":"2019-09-15T07:54:09.533Z","comments":true,"path":"categories-1/index.html","permalink":"https://whisshe.github.io/categories-1/index.html","excerpt":"","text":""},{"title":"所有标签","date":"2019-09-15T07:55:21.782Z","updated":"2019-09-15T07:55:21.782Z","comments":true,"path":"tags/index.html","permalink":"https://whisshe.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"git基础","slug":"git基础","date":"2019-09-15T04:19:12.982Z","updated":"2019-09-15T08:02:53.249Z","comments":true,"path":"2019/09/15/git基础/","link":"","permalink":"https://whisshe.github.io/2019/09/15/git基础/","excerpt":"","text":"gitlab相关 基础知识 git版本概念 初始化 创建仓库、克隆仓库 制作仓库 关联远程仓库 克隆远程仓库 查看工作区的文件修改状态 查看文件差异 添加和提交 添加修改到暂存区 提交修改到你本地的版本库 忽略文件列表 移除文件 仅删除暂存区中的，但是想保留工作目录的文件 同时删除暂存区和工作目录的文件 通配符模式 推送更改到远程仓库 如果本地目录并没有关联远程仓库 推送前面commit到版本库的内容到远程仓库的指定分支 推送所有分支 强制推送 分支 拉取远程仓库的代码 查看当前存在的分支，以及当前处于哪个分支 以当前的master分支为基础创建一个dev分支，并切换到dev分支 切换回master分支 删除创建的分支 合并分支 合并出现冲突 查看当前分支与其它分支的差异 版本提交记录 查看提交记录(不包含被删除的commit操作) 查看所有的reset和commit操作 更多的功能 版本回溯 如果有操作失误，可以使用以下命令丢弃本地文件的修改 撤销暂存区中的修改 如果忘记了修改了哪些文件，下面有两种方法进行恢复 实用技巧 别名 彩色的输出 更深入的了解 gitlab相关gitlab相关 基础知识git版本概念你的本地仓库由 git 维护的三个部分组成。第一个是你的 工作目录，它持有实际文件；第二个是 暂存区（Index），它像个缓存区域，临时保存你的改动；最后是 HEAD，HEAD是一个指针，指向最新的提交，也就是你最后一次提交的结果。 初始化git init 使用git对本地项目进行管理，会生成一个.git的文件夹，版本库和配置文件在里面 创建仓库、克隆仓库制作仓库git clone --bare &lt;localdir&gt; &lt;local&gt;.git 关联远程仓库git remote add &lt;reponame&gt; username@host:/path/to/repository 克隆远程仓库git clone username@host:/path/to/repository #ssh方式 git clone http://url/path/to/repository #http方式 查看工作区的文件修改状态git status #最常用命令 查看文件差异git diff 此命令比较的是工作目录中当前文件和暂存区域快照之间的差异， 也就是修改之后还没有暂存起来的变化内容 git diff --staged 比较已暂存的和快照的区别 添加和提交添加修改到暂存区git add &lt;filename&gt; git add * # 会忽略.gitignore中的文件 提交修改到你本地的版本库git commit -m &quot;本次提交文件修改的内容说明&quot; 忽略文件列表项目编译时有时候会产生一些不需要提交到仓库的文件，这时候.gitignore就派上了用场，git在add时会忽略.gitignore中的文件，.gitignore支持的格式规范如下所示 所有空行或者以 ＃ 开头的行都会被 Git 忽略。 可以使用标准的 glob 模式匹配。 匹配模式可以以（/）开头防止递归。 匹配模式可以以（/）结尾指定目录。 要忽略指定模式以外的文件或目录，可以在模式前加上惊叹号（!）取反。 移除文件仅删除暂存区中的，但是想保留工作目录的文件git rm &lt;filename&gt; --cached 这种情况是，不小心将大量的编译文件添加到暂存区，但是需要保留在工作目录 同时删除暂存区和工作目录的文件git rm &lt;filename&gt; -f 慎用，文件无法找回 通配符模式git rm log/\\*.log --cached 推送更改到远程仓库如果本地目录并没有关联远程仓库git remote add origin &lt;server&gt; 推送前面commit到版本库的内容到远程仓库的指定分支git push &lt;repo&gt; &lt;branch&gt; 推送所有分支git push 强制推送git push -f (当本地与远程冲突无法自动合并时，并且以本地代码为主的情况，慎用) 分支分支是用来将特性开发绝缘开来的。在你创建仓库的时候，master 是“默认的”分支。在其他分支上进行开发，完成后再将它们合并到主分支上。 拉取远程仓库的代码git pull git pull = git fetch + git merge refs/remotes/origin/master 查看当前存在的分支，以及当前处于哪个分支git branch # 本地的分支 git branch -a # 显示所有分支，包括远端仓库的分支 git branch -v # 显示分支的详细信息 以当前的master分支为基础创建一个dev分支，并切换到dev分支git checkout -b dev 切换回master分支git checkout master 删除创建的分支git branch -d dev git branch -D dev # 强制删除分支 合并分支切换到master分支，将dev分支的修改合并到master分支上 git merge dev git pull和merge的时候git 都会尝试去自动合并改动。遗憾的是，这可能并非每次都成功，并可能出现冲突这时候就需要你修改这些文件来手动合并这些冲突改完之后，你需要执行如下命令以将它们标记为合并成功： git add &lt;filename&gt; 合并出现冲突当多人对同一个文件的相同位置进行了修改时，git无法对差异部分进行自动合并，这时候需要进行手动的合并 git mergetool 输入上面的命令会出现下图的界面，按下回车，会使用vimdiff，也就是下面的第二个图 下图中左边的是你本地修改过后的版本LOCAL，右边是远端的版本REMOTE，中间是在远端和本地修改之前的版本BASE。 然后用vim的命令模式，选择其中的一个版本 :diffget LO #注意按下冒号是进入命令模式，LO是LOCAL的缩写，也可以写全，BASE，REMOTE一样可以使用2位的缩写 还有一个方法是直接手动进行修改为你想保留的版本，然后git add &lt;filename&gt; 查看当前分支与其它分支的差异git diff &lt;source_branch&gt; &lt;target_branch&gt; 建议开发的时候多使用分支，在开发完成之后再合并至主分支 版本提交记录查看提交记录(不包含被删除的commit操作)git log git log --pretty=oneline #压缩成一行的log git log --author=username #查看某人的提交记录 查看所有的reset和commit操作git reflog 更多的功能git log --help 版本回溯git reset --soft # 保留当前的修改和提交，只是将HEAD指向较旧的版本 git reset --hard # 丢弃当前的修改和提交，将旧的版本作为最新的HEAD 如果有操作失误，可以使用以下命令丢弃本地文件的修改git checkout -- &lt;filename&gt; 这个命令不会修改已经添加到暂存区的内容，也不会对新文件有修改，只会将本地目录的文件回退到最新一次的提交上，也就是HEAD上 撤销暂存区中的修改git reset -- &lt;filename&gt; #撤销git add操作 如果忘记了修改了哪些文件，下面有两种方法进行恢复git fetch origin git rest --hard origin/master 丢弃你在本地的所有改动与提交，可以到服务器上获取最新的版本历史，并将你本地主分支指向它 或者直接回退至你的HEAD版本 git reset --hard HEAD 实用技巧别名git --config alias.st status #将st作为status的别名 设置过后可以使用git st查看当前的git状态 彩色的输出git config color.ui true 更深入的了解git官方文档","categories":[{"name":"git","slug":"git","permalink":"https://whisshe.github.io/categories/git/"},{"name":"技术","slug":"git/技术","permalink":"https://whisshe.github.io/categories/git/技术/"}],"tags":[{"name":"git","slug":"git","permalink":"https://whisshe.github.io/tags/git/"}]},{"title":"Hello World","slug":"hello-world","date":"2019-09-13T09:07:32.243Z","updated":"2019-09-15T07:42:41.261Z","comments":true,"path":"2019/09/13/hello-world/","link":"","permalink":"https://whisshe.github.io/2019/09/13/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[{"name":"hello","slug":"hello","permalink":"https://whisshe.github.io/categories/hello/"}],"tags":[]}]}